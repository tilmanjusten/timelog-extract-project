#!/usr/bin/env node

const fs = require('fs');
const args = parseArgv(process.argv.slice(2));
const pattern_log_entry = /(\d+)\-(\d+)\-(\d+)\s+(\d+:\d+)\s+([^\n]+)/i;
const pattern_ticket = /#(\d+)/i;

function buildLogEntry(match) {
    const log = match[5].trim();
    const is_task = log.indexOf('::') > -1;
    const has_ticket_id = log.search(pattern_ticket) > -1;

    const log_entry = {
        raw: match[0],
        // switch day and month
        date: new Date(`${match[3]}-${match[1]}-${match[2]} ${match[4]}`),
        slacking: log.indexOf('**') > -1,
        start: log.trim() === '__start__',
        project_name: is_task ? log.match(/(.+)\s?::/i)[1].trim() : null,
        task: is_task ? log.match(/::\s?([^\n]+)/i)[1].trim() : log.trim(),
        // unit will be seconds
        duration: null,
        ticket: has_ticket_id ? log.match(pattern_ticket)[1] : null
    };

    return log_entry;
}

function calculateDuration(log_entries) {
    const first = log_entries.slice(0, 1);
    let prev = log_entries.shift();

    for (let entry of log_entries) {
        entry.duration = Math.abs((entry.date.getTime() - prev.date.getTime()) / 1000);

        prev = entry;
    }

    log_entries.unshift(...first);

    return log_entries;
}

function filter_logs(logs, project_name) {
    const pattern_project = new RegExp(`${project_name}\\s?::`);
    const lines = logs.split('\n');
    const log_entries_raw = lines.map(line => line.match(pattern_log_entry)).filter(log_entry => !!log_entry);
    let log_entries = log_entries_raw.map(buildLogEntry);

    log_entries = calculateDuration(log_entries);

    return log_entries.filter(log_entry => log_entry.project_name === project_name);
}

function pad(val, len, fill) {
    return val.toString().padStart(len, fill);
}

function createLogString(log_entry) {
    const d = log_entry.date;
    const duration_minutes = Math.ceil(log_entry.duration / 60);
    const date_string = `${pad(d.getDate(), 2, 0)}-${pad(d.getMonth() + 1, 2, 0)}-${d.getFullYear()} ${pad(d.getHours(), 2, 0)}:${pad(d.getMinutes(), 2, 0)}`;
    let log_string;

    if (log_entry.start || log_entry.slacking) {
        log_string = log_entry.task;
    } else {
        log_string = `${log_entry.project_name} :: ${log_entry.task} (${duration_minutes} min)`;
    }

    return `${date_string}   ${log_string}`;
}

function createReportString(log_entry) {
    const d = log_entry.date;
    const duration_minutes = Math.ceil(log_entry.duration / 60);
    const date_string = `${d.getFullYear()}-${pad(d.getMonth() + 1, 2, 0)}-${pad(d.getDate(), 2, 0)} ${pad(d.getHours(), 2, 0)}:${pad(d.getMinutes(), 2, 0)}`;
    const log_string = log_entry.task;
    const ticket_string = log_entry.ticket ? `#${log_entry.ticket}` : '-    ';

    return `${date_string}\t${duration_minutes} min\t\t${ticket_string}\t\t${log_string}`;
}

function writeFile(filename, content) {
    fs.writeFileSync(filename, content, 'utf8');
}

if (process.argv.length > 2 && args.help === false) {
    fs.readFile(args.filename, "utf8", function (err, content) {
        if (err) {
            console.log("Invalid file : " + arg);
            process.exit(1);
        } else {
            const logs = filter_logs(content, args.project_name);
            let lines;

            if (args.report) {
                lines = logs.map(createReportString);
                const minutes = Math.ceil((logs.map(le => le.duration).reduce((p, c) => p + c)) / 60);
                const hours = Math.round(minutes / 60 * 100) / 100;
                lines.push(`\nTotal: ${hours} h (${minutes} min)`);
            } else {
                lines = logs.map(createLogString);
            }

            writeFile(`${args.project_name}.txt`, lines.join('\n') + '\n');
        }
    });
} else {
    showHelp();
}

function showHelp() {
    console.log("Usage: node ./extract-logs <project_name> [<input_filename>] [<options]");
    console.log("\nIf no input file is specified, assume log.txt.");
    console.log("\nOptions:");
    console.log("\t--help, -h  Print usage info");
    console.log("\t--report, -r  Save result as report");
}

function parseArgv(args) {
    let result = {
        filename: 'log.txt',
        project_name: null,
        report: false,
        help: false
    };

    for (let item of args) {
        const is_option = item.indexOf('-') > -1;
        
        item = item.replace(/^-+/, '');
        
        if (is_option && (item === 'h' || item === 'help')) {
            result.help = true;
        } else if (is_option && (item === 'r' || item === 'report')) {
            result.report = true;
        } 
        // first not option has to be the project name
        else if (!is_option && result.project_name === null) {
            result.project_name = item;
        }
        // second not option has to be the file name
        else if (!is_option && result.project_name !== null && item.length) {
            result.filename = item;
        } 
    }

    return result;
}
