#!/usr/bin/env node

const fs = require('fs');
const args = parseArgv(process.argv.slice(2));
const pattern_log_entry = /(\d+)\-(\d+)\-(\d+)\s+(\d+:\d+)\s+([^\n]+)/i;
const pattern_ticket = /#(\d+)/i;
const pattern_subproject = /::\s?(.+):/i;

function buildLogEntry(match) {
    const log = match[5].trim();
    const is_task = log.indexOf('::') > -1;
    const has_ticket_id = log.search(pattern_ticket) > -1;
    const has_subproject_id = log.search(pattern_subproject) > -1;

    const log_entry = {
        raw: match[0],
        // switch day and month
        date: new Date(`${match[3]}-${match[1]}-${match[2]} ${match[4]}`),
        slacking: log.indexOf('**') > -1,
        start: log.trim() === '__start__',
        project_name: is_task ? log.match(/(.+)\s?::/i)[1].trim() : null,
        task: is_task ? log.match(/::\s?([^\n]+)/i)[1].trim() : log.trim(),
        // unit will be seconds
        duration: null,
        ticket: has_ticket_id ? log.match(pattern_ticket)[1] : null,
        subproject: has_subproject_id ? log.match(pattern_subproject)[1] : null
    };

    return log_entry;
}

function calculateDuration(log_entries) {
    const first = log_entries.slice(0, 1);
    let prev = log_entries.shift();

    for (let entry of log_entries) {
        entry.duration = Math.abs((entry.date.getTime() - prev.date.getTime()) / 1000);

        prev = entry;
    }

    log_entries.unshift(...first);

    return log_entries;
}

function filter_logs(logs, project_name) {
    const pattern_project = new RegExp(`${project_name}\\s?::`);
    const lines = logs.split('\n');
    const log_entries_raw = lines.map(line => line.match(pattern_log_entry)).filter(log_entry => !!log_entry);
    let log_entries = log_entries_raw.map(buildLogEntry);

    log_entries = calculateDuration(log_entries);

    if (args.date_start) {
        log_entries = log_entries.filter(log_entry => log_entry.date.getTime() >= args.date_start.getTime());
    }

    if (args.date_until) {
        log_entries = log_entries.filter(log_entry => log_entry.date.getTime() <= args.date_until.getTime());
    }

    const result = log_entries.filter(log_entry => log_entry.project_name === project_name);

    return result;
}

function pad(val, len, fill) {
    return val.toString().padStart(len, fill);
}

function createLogString(log_entry) {
    const d = log_entry.date;
    const duration_minutes = Math.ceil(log_entry.duration / 60);
    const date_string = `${pad(d.getDate(), 2, 0)}-${pad(d.getMonth() + 1, 2, 0)}-${d.getFullYear()} ${pad(d.getHours(), 2, 0)}:${pad(d.getMinutes(), 2, 0)}`;
    let log_string;

    if (log_entry.start || log_entry.slacking) {
        log_string = log_entry.task;
    } else {
        log_string = `${log_entry.project_name} :: ${log_entry.task} (${duration_minutes} min)`;
    }

    return `${date_string}   ${log_string}`;
}

function createReportString(log_entry) {
    const d = log_entry.date;
    const duration_minutes = Math.ceil(log_entry.duration / 60);
    const date_string = `${d.getFullYear()}-${pad(d.getMonth() + 1, 2, 0)}-${pad(d.getDate(), 2, 0)} ${pad(d.getHours(), 2, 0)}:${pad(d.getMinutes(), 2, 0)}`;
    const log_string = log_entry.task;
    const ticket_string = log_entry.ticket ? `#${log_entry.ticket}` : '-    ';

    return `${date_string}\t${duration_minutes} min\t\t${ticket_string}\t\t${log_string}`;
}

function createReportStringByTicket(log_entry) {
    const d = log_entry.date;
    const duration_minutes = Math.ceil(log_entry.duration / 60);
    const date_string = `${d.getFullYear()}-${pad(d.getMonth() + 1, 2, 0)}-${pad(d.getDate(), 2, 0)} ${pad(d.getHours(), 2, 0)}:${pad(d.getMinutes(), 2, 0)}`;
    const pattern_remove_ticket_id = new RegExp(`([^\\s]+)?#?${log_entry.ticket}:?\\s?`);
    const log_string = log_entry.task.replace(pattern_remove_ticket_id, '');

    return `${date_string}\t${duration_minutes} min\t\t${log_string}`;
}

function groupByTicket(logs) {
    let lines_by_ticket = {};

    // create psuedo ticket ids
    for (const log_entry of logs) {
        if (log_entry.ticket) {
            continue;
        }

        const testing = log_entry.task.match(/(testing|browser|ie\d|edge|fx|firefox|chrome|safari|ios|android|windows)/i);
        const meeting = log_entry.task.match(/(briefing|meeting|status|abstimmung|kickoff)/i);
        const preps = log_entry.task.match(/(tickets|Ã¼bergabe)/i);
        const docs = log_entry.task.match(/(doku|docs?:)/i);

        if (testing) {
            log_entry.ticket = 'Testing';
        } else if (meeting) {
            log_entry.ticket = 'Meeting';
        } else if (preps) {
            log_entry.ticket = 'Preparations';
        } else if (docs) {
            log_entry.ticket = 'Documentation';
        } else {
            log_entry.ticket = '-';
        }
    }

    // group log entries by their ticket id
    for (const log_entry of logs) {
        const ticket_id = log_entry.ticket || '---';

        if (!lines_by_ticket[ticket_id]) {
            lines_by_ticket[ticket_id] = [];
        }

        lines_by_ticket[ticket_id].push(log_entry);
    }

    // flatten
    let lines = [];

    for (const ticket_id in lines_by_ticket) { 
        lines.push(`Ticket ${ticket_id}:`);

        let duration = 0;

        for (const log_entry of lines_by_ticket[ticket_id]) {
            lines.push(createReportStringByTicket(log_entry));
            duration += log_entry.duration;
        }

        const minutes = Math.ceil(duration / 60);
        const hours = Math.round(minutes / 60 * 100) / 100;

        lines.push(`Subtotal: ${hours} h (${minutes} min)\n`);
    }

    return lines;
}

function writeFile(filename, content) {
    fs.writeFileSync(filename, content, 'utf8');
}

if (process.argv.length > 2 && args.help === false) {
    fs.readFile(args.filename, "utf8", function (err, content) {
        if (err) {
            console.log(`Invalid file: ${args.filename}`);
            process.exit(1);
        } else {
            if (content.indexOf(args.project_name) < 0) {
                console.log(`Project '${args.project_name}' not found.`);
                process.exit(1);
            }

            const logs = filter_logs(content, args.project_name);
            const minutes = Math.ceil((logs.map(le => le.duration).reduce((p, c) => p + c)) / 60);
            const hours = Math.round(minutes / 60 * 100) / 100;
            let lines;
            let result;

            if (args.report) {
                lines = args.simple ? logs.map(createReportString) : groupByTicket(logs);

                lines.push(`\nTotal: ${hours} h (${minutes} min)`);
            } else {
                lines = logs.map(createLogString);
            }

            result = lines.join('\n') + '\n';

            if (args.use_stdout) {
                process.stdout.write(result);
            } else {
                writeFile(args.filename_out, result);
            }
        }
    });
} else {
    showHelp();
}

function showHelp() {
    console.log("Usage: node ./extract-logs <project_name> [<input_filename>] [<options]");
    console.log("\nIf no input file is specified, assume log.txt.");
    console.log("\nOptions:");
    console.log("\t--help, -h  Print usage info");
    console.log("\t--report, -r  Save result as report");
    console.log("\t--simple, -s  Simple reports");
    console.log("\t  only available when report option is set");
    console.log("\t--date-start=<date_start>, -ds=<date_start>  Start date (YYYY-MM-DD)");
    console.log("\t--date-until=<date_until>, -du=<date_until>  Start until (YYYY-MM-DD)");
    console.log("\t--output=<filename>, -o=<filename>  Write result to file");
}

function parseArgv(args) {
    let result = {
        filename: 'log.txt',
        project_name: null,
        report: false,
        simple: false,
        help: false,
        date_start: null,
        date_until: null,
        filename_out: null,
        use_stdout: true
    };

    for (let item of args) {
        const is_option = item.indexOf('-') > -1;
        
        item = item.replace(/^-+/, '');
        const item_value = item.match(/.+=([^\s]+)/i);
        
        if (is_option && (item === 'h' || item === 'help')) {
            result.help = true;
        } else if (is_option && (item === 'r' || item === 'report')) {
            result.report = true;
        } else if (is_option && (item === 's' || item === 'simple')) {
            result.simple = true;
        } else if (is_option && item_value && item.search(/(ds|date-start)=\d{2,4}-\d{1,2}-\d{1,2}/i) > -1) {
            result.date_start = new Date(item_value[1]);
        } else if (is_option && item_value && item.search(/(du|date-until)=\d{2,4}-\d{1,2}-\d{1,2}/i) > -1) {
            result.date_until = new Date(item_value[1]);
        } else if (is_option && item_value && item.search(/(o|output)=([^\s]+|"[^"]+")/i) > -1) {
            result.filename_out = item_value[1];
            result.use_stdout = false;
        }
        // first not option has to be the project name
        else if (!is_option && result.project_name === null) {
            result.project_name = item;
        }
        // second not option has to be the file name
        else if (!is_option && result.project_name !== null && item.length) {
            result.filename = item;
        }
    }

    return result;
}
